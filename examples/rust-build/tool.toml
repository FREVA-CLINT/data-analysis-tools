# This is a template configuration file for your data analysis tool.
# Use this file as a starting point by copying and editing it to fit your
# requirements. The configuration file follows TOML syntax. For more details,
# visit: https://toml.io.
#
# IMPORTANT: Remove all comments (lines starting with '#') before using this
# configuration.

[tool]
# General information about your tool.
name = "example-rust-build"  # The name of your tool.
authors = [
    "Author 1 <author1@email.com>",
    "Author 2 <author2@email.com>"
]  # List of authors and their contact information.
version = "v0.0.2"  # Semantic version of the tool.
summary = "A brief description of what this tool does."  # Short overview.
title = "A catchy title for the tool (optional)"  # Optional title for flair.
description = """
A detailed description of the tool's purpose and functionality. This section
supports multi-line text for extensive details.
"""  # Extended multi-line description.

[tool.run]
# Defines how your tool is executed. This section specifies the command to
# run, such as a script, compiled binary, or Jupyter notebook.
command = "./target/release/example"  # Command to execute the tool.
# The specified command will receive a single JSON input containing all input
# parameters. Ensure your command processes this JSON file. Refer to the
# example script for guidance.

[tool.build]
# Configuration for building the tool.
dependencies = ["rust"]  # Optional build-specific deps.
# NOTE: If a 'build.sh' script is provided, it will be executed during build.

[tool.input_parameters.parameter_1]
# Parameter 1: Example of a string parameter with a default value.
# NOTE: Setting a default value and marking a parameter as mandatory are
# typically mutually exclusive. If a parameter has a default value, users
# are not required to provide it explicitly.
title = "Parameter 1"
type = "string"  # Data type of the parameter.
mandatory = false  # Indicates whether this parameter is required.
default = "default_value"  # Default value for the parameter.
help = "A help message for parameter-1, which is a string parameter."

[tool.input_parameters.parameter_2]
# Parameter 2: Example of a mandatory integer parameter.
# NOTE: Mandatory parameters should not have default values.
title = "Parameter 2"
type = "integer"  # Data type: integer.
mandatory = true  # Indicates this parameter is required.
help = "A help message for parameter-2, which is an integer."

[tool.input_parameters.parameter_3]
# Parameter 3: Example of a float parameter with a default value.
title = "Parameter 3"
type = "float"  # Data type: floating-point number.
mandatory = false  # This parameter is optional since it has a default value.
default = 2.0  # Default value.
help = "A help message for parameter-3, which is a float."

[tool.input_parameters.parameter_4]
# Parameter 4: Example of a boolean parameter with a default value.
title = "Parameter 4"
type = "bool"  # Data type: boolean.
default = true  # Default value is true.
help = "A help message for parameter-4, which is a boolean flag."

[tool.input_parameters.parameter_5]
# Parameter 5: Example of a datetime parameter.
title = "Parameter 5"
type = "datetime"  # Data type: datetime in ISO 8601 format.
default = "2000-01-01T00:00:00Z"  # Default value.
help = "A help message for parameter-5, which is a datetime parameter."

[tool.input_parameters.parameter_6]
# Parameter 6: Example of a databrowser parameter for search functionality.
title = "Parameter for Variable"
type = "databrowser"  # Special parameter type for databrowser integration.
help = """
Allows integration with a databrowser search. Specify a `search_key` and
optional constraints for filtering search results.
"""
search_key = "variable"  # Key used in the databrowser search.
constraint.time_frequency = "1hr"  # Example constraint: time frequency.
constraint.product = "cmip"  # Example constraint: product type.
default = "tas"  # Default value for the search key.
search_result = "input_files"  # Resolves this search to actual data.

[tool.input_parameters.parameter_6a]
# Additional databrowser parameter for combining search queries.
title = "Parameter for Experiment"
type = "databrowser"
help = """
Defines the "experiment" search key for querying data. Combines with other
databrowser parameters to refine search results.
"""
search_key = "experiment"
constraint.time_frequency = "1hr"
constraint.product = "cmip"
default = "amip"
search_result = "input_files"

[tool.input_parameters.parameter_6b]
# Separate databrowser parameter for a new search result key.
title = "Another Parameter"
type = "databrowser"
help = """
Creates a new search query and stores results under the key 'other_files'.
"""
search_key = "experiment"
constraint.time_frequency = "1hr"
constraint.product = "cmip"
default = "amip"
search_result = "other_files"

[tool.input_parameters.parameter_6c]
# Databrowser parameter without a resolved search.
title = "Databrowser Parameter without a Search Query"
type = "databrowser"
help = """
Passes the databrowser parameter directly without applying a search. Omit
the `search_result` key to prevent a search query.
"""
search_key = "time_frequency"
default = "1hr"

[tool.input_parameters.parameter_7]
# Parameter 7: Example of a range parameter.
title = "Parameter 7"
type = "range"  # Range type parameter.
help = """
Specifies a range in the format [start, end, increment]. Supports shorthand
forms: [end] (equivalent to [0, end, 1]) or [start, end].
"""
default = [0.0, 10.5, 0.1]  # Default range.
mandatory = false

[tool.input_parameters.parameter_8]
# Parameter 8: Example of a list parameter.
title = "List Parameter"
type = "integer"  # List of integers.
help = """
Accepts a list of values where each item matches the specified data type.
"""
default = [10, 1, -1]  # Default list of integers.
